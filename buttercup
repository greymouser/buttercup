#!/usr/bin/env bash

#-------------------------------------------------------------------------------
# Early out for Bash <4.
if [[ "${BASH_VERSINFO[0]}" -lt 4 ]]; then
  echo "This build system requires Bash 4 or greater."
  exit
fi


#-------------------------------------------------------------------------------
# Get script directory
# http://stackoverflow.com/a/246128/404640
BC_SCRIPT_FILE="${BASH_SOURCE[0]}"
# resolve $BC_SCRIPT_FILE until the file is no longer a symlink
while [ -h "$BC_SCRIPT_FILE" ]; do
  BC_SCRIPT_DIR="$( cd -P "$( dirname "$BC_SCRIPT_FILE" )" && pwd )"
  BC_SCRIPT_FILE="$(readlink "$BC_SCRIPT_FILE")"
  # if $BC_SCRIPT_FILE was a relative symlink, we need to resolve it relative to
  # the path where the symlink file was located
  [[ $BC_SCRIPT_FILE != /* ]] && BC_SCRIPT_FILE="$BC_SCRIPT_DIR/$BC_SCRIPT_FILE"
done
BC_SCRIPT_DIR="$( cd -P "$( dirname "$BC_SCRIPT_FILE" )" && pwd )"
BC_SCRIPT_FILE=$(basename $BC_SCRIPT_FILE)


#-------------------------------------------------------------------------------
# top-level directories
BC_TOP_DIR="$BC_SCRIPT_DIR"
BC_LIB_DIR="$BC_TOP_DIR/lib"
BC_DEVTOOLS_DIR="$BC_TOP_DIR/devtools"
BC_INSTALL_DIR="$BC_TOP_DIR/install"
BC_PACKAGES_DIR="$BC_TOP_DIR/packages"

NODE_MODULES_BIN_DIR="$BC_TOP_DIR/node_modules/.bin"

mkdir -p "$BC_INSTALL_DIR"

#-------------------------------------------------------------------------------
# "purify" the PATH
PATH="$NODE_MODULES_BIN_DIR":"$BC_DEVTOOLS_DIR/bin":/usr/bin:/bin


#-------------------------------------------------------------------------------
. "${BC_LIB_DIR}/misc.sh"                 # global misc & helper functions
. "${BC_LIB_DIR}/toolchain.sh"            # Toolchain related setup
. "${BC_LIB_DIR}/help.sh" $BC_SCRIPT_FILE # Help, info, etc
. "${BC_LIB_DIR}/packages.sh"             # Package{s} info
. "${BC_LIB_DIR}/devenv.sh"               # build host specific package setup
. "${BC_LIB_DIR}/cli.sh"                  # build system cli opt processing


#-------------------------------------------------------------------------------
bc_cli_process $@

exit

#-------------------------------------------------------------------------------
all_run=(fetch unpack patch configure build install test pkgbuild productbuild)

if [[ "" == "$1" ]]; then
  do_run=${all_run[@]}
elif array_contains "$1" ${all_run[@]}; then
  do_run=($1)
else
  echo "bad option '$1'"
  exit 1
fi

unset PKG_NAME PKG_VERSION


#-------------------------------------------------------------------------------
# Iterate over all steps, until goal is reached
for step in ${do_run[@]}; do
  echo "$step"
  x_${step}
done

#-------------------------------------------------------------------------------
top_dir="/Users/greymouser/Projects/erlang/Projects/erlang-framework"

#src_name="otp_src"
src_name="otp"
src_version="17.5.4"

src_designation="$src_name-$src_version"

#src_file="$src_designation.tar.gz"

src_repo="git@github.com:erlang/$src_name.git"
src_repo_version_tag="OTP-$src_version"

src_homepage="http://www.erlang.org/"
patches=""

top_pkg_dir="$top_dir/$src_designation"
src_dir="$top_pkg_dir/src"
build_dir="$top_pkg_dir/build"
dest_dir="$top_pkg_dir/install"
pkg_dir="$top_pkg_dir/pkg"
repos_dir="$top_pkg_dir/repos"

mkdir -p "$src_dir"
mkdir -p "$build_dir"
mkdir -p "$dest_dir"
mkdir -p "$pkg_dir"
mkdir -p "$repos_dir"

#-------------------------------------------------------------------------------
prefix="/usr"
sysconfdir="/private/etc"

organization="org.erlang"
identifier="$organization.otp"
pkgbuild_output="$src_designation.bin.pkg"
productbuild_output="$src_designation.pkg"

export ERL_TOP="$build_dir/$src_repo_version_tag"

#-------------------------------------------------------------------------------
function x_fetch () {
  stage_done_file=".$src_designation.fetch"
  if [[ ! -f "$stage_done_file" ]]; then

    pushd "$src_dir"
    # xc_run curl                                \
    #   -L -O                                    \
    #   http://www.erlang.org/download/$src_file \
    #   || error_report fetch

    for patch_url in $patches; do
      xc_run curl -L -O $patch_url || error_report fetch
    done
    popd

    pushd "$repos_dir"
    if [[ ! -d "$src_name" ]]; then
      xc_run git clone "$src_repo" || error_report fetch
    else
      pushd "$src_name"
      xc_run git pull || error_report fetch
      popd
    fi
    popd

    touch "$stage_done_file"
  fi
}

function x_unpack () {
  stage_done_file=".$src_designation.unpack"
  if [[ ! -f "$stage_done_file" ]]; then

    #pushd "$build_dir"
    #xc_run tar xjf "$src_dir/$src_file" || error_report unpack
    #popd

    pushd "$repos_dir/$src_name"
    xc_run                            \
      git archive                     \
      --format=tar                    \
      --prefix=$src_repo_version_tag/ \
      $src_repo_version_tag           \
      | (cd "$build_dir" && tar xf -) \
      || error_report unpack
    popd

    touch "$stage_done_file"
  fi
}

function x_patch () {
  stage_done_file=".$src_designation.patch"
  if [[ ! -f "$stage_done_file" ]]; then

    touch "$stage_done_file"
  fi
}

function x_configure () {

#--with-dynamic-trace=dtrace   \
  local configure_opts="      \
--build=$triplet_build_type   \
--host=$triplet_host_type     \
--prefix=$prefix              \
--sysconfdir=$sysconfdir      \
--disable-silent-rules        \
--enable-threads              \
--enable-smp-support          \
--enable-kernel-poll          \
--enable-hipe                 \
--enable-darwin-64-bit        \
--enable-m64-build            \
--with-javac                  \
--with-ssl                    \
--with-odbc                   \
--with-wx-config=/usr/bin/wx-config \
--disable-sctp                \
"

  stage_done_file=".$src_designation.configure"
  if [[ ! -f "$stage_done_file" ]]; then

    pushd "$ERL_TOP"
    if [[ ! -f configure ]]; then
      PATH="$PATH:/usr/local/bin" ./otp_build autoconf || error_report configure
    fi

    ./configure                 \
      $configure_opts           \
      DESTDIR="$dest_dir"       \
      || error_report configure
    popd

    touch "$stage_done_file"
  fi
}

function x_build () {
  stage_done_file=".$src_designation.build"
  if [[ ! -f "$stage_done_file" ]]; then

    pushd "$ERL_TOP"
    V=1 xc_run make -j5 DESTDIR="$dest_dir" || error_report build
    popd

    touch "$stage_done_file"
  fi
}

function x_install () {
  stage_done_file=".$src_designation.install"
  if [[ ! -f "$stage_done_file" ]]; then

    mkdir -p "$dest_dir/$prefix"
    mkdir -p "$dest_dir/$sysconfdir"

    pushd "$build_dir/$src_designation-build"
    V=1 xc_run make -j5 install DESTDIR="$dest_dir" || error_report install
    popd

    touch "$stage_done_file"
  fi
}

function x_test () {
  stage_done_file=".$src_designation.test"
  if [[ ! -f "$stage_done_file" ]]; then

    touch "$stage_done_file"
  fi
}

function x_pkgbuild () {
  stage_done_file=".$src_designation.pkgbuild"
  if [[ ! -f "$stage_done_file" ]]; then

    pushd "$pkg_dir"
    $(xc_run --find pkgbuild)     \
      --root "$dest_dir"          \
      --identifier "$identifier"  \
      --version $src_version      \
      --ownership recommended     \
      "$pkgbuild_output"          || error_report pkgbuild
    popd

    touch "$stage_done_file"
  fi
}

function x_productbuild () {

  local dist_xml_file="distribution.xml"

  cat <<ENDOFFILE > "$pkg_dir/$dist_xml_file"
<?xml version="1.0" encoding="utf-8" standalone="no"?>
<installer-gui-script minSpecVersion="1">

  <title>$src_name</title>
  <organization>$organization</organization>
  <domains enable_localSystem="true"/>
  <options customize="never" require-scripts="true" rootVolumeOnly="true" />

  <!-- Define documents displayed at various steps -->
  <!--
  <welcome    file="welcome.html"    mime-type="text/html" />
  <license    file="license.html"    mime-type="text/html" />
  <conclusion file="conclusion.html" mime-type="text/html" />
  -->

  <!-- List all component packages -->
  <pkg-ref id="$identifier"
           version="0"
           auth="root">$pkgbuild_output</pkg-ref>

  <!-- List them again here. They can now be organized as a hierarchy if you want. -->
  <choices-outline>
    <line choice="$identifier"/>
  </choices-outline>

  <!-- Define each choice above -->
  <choice id="$identifier"
          visible="false"
          title="$src_name"
          description="$src_homepage"
          start_selected="true">
    <pkg-ref id="$identifier"/>
  </choice>

</installer-gui-script>
ENDOFFILE

  stage_done_file=".$src_designation.productbuild"
  if [[ ! -f "$stage_done_file" ]]; then

    pushd "$pkg_dir"
    #--resources resources \
    $(xc_run --find productbuild)     \
      --distribution "$dist_xml_file" \
      --package-path .                \
      --version $src_version          \
      "$pkg_dir/$productbuild_output" || error_report productbuild
    popd

    touch "$stage_done_file"
  fi
}

#-------------------------------------------------------------------------------
for step in ${do_run[@]}; do
  echo "$step"
  x_${step}
done
